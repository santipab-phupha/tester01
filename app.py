import os
import re
import json
import streamlit as st
import pandas as pd
import google.generativeai as genai

# ==== CONFIG ====
API_KEY = "AIzaSyDGvQId4r_P26jFxA_7hVeirouw8KIppUQ"
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash-latest")

# Use the files you‚Äôve already provisioned in the app directory
Q_FILE = os.path.join(os.getcwd(), "question.txt")    # now a .txt file
DB_FILE = os.path.join(os.getcwd(), "database.csv")

# ==== AI / JSON UTILS ====
def ask_gemini(prompt: str) -> str:
    convo = model.start_chat(history=[])
    return convo.send_message(prompt).text

def extract_json_array(raw: str) -> str:
    matches = re.findall(r"\[.*\]", raw, flags=re.DOTALL)
    return max(matches, key=len) if matches else raw

def load_questions():
    if not os.path.exists(Q_FILE):
        return None, None
    raw = open(Q_FILE, encoding="utf-8").read()
    try:
        return json.loads(raw), None
    except json.JSONDecodeError:
        cleaned = extract_json_array(raw)
        try:
            questions = json.loads(cleaned)
            # overwrite the existing file with cleaned JSON
            with open(Q_FILE, "r+", encoding="utf-8") as f:
                f.seek(0)
                f.truncate()
                json.dump(questions, f, ensure_ascii=False, indent=2)
            return questions, None
        except json.JSONDecodeError as e:
            return None, e

def recheck_questionnaire_fit(questions_text, user_summary):
    prompt = f"""
‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå: {user_summary}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {questions_text}

‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
1. ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠
2. ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏©‡∏≤, ‡πÇ‡∏ó‡∏ô, ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô)?
3. ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô ‡πÜ
4. ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏≠ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏≠‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏°‡∏±‡πâ‡∏¢
5. ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°/‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå?/‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢?/‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)/‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
"""
    return ask_gemini(prompt)

# ==== STREAMLIT APP ====
st.set_page_config(page_title="Survey App", layout="wide")
if "current_page" not in st.session_state:
    st.session_state.current_page = "Generate Questions"

with st.sidebar:
    st.markdown("## üìä Survey Navigation")
    pages = ["Generate Questions", "Answer Poll", "Check Bias", "Fix Survey", "Re-Check"]
    choice = st.selectbox("Select Section", pages, index=pages.index(st.session_state.current_page))
    st.session_state.current_page = choice

page = st.session_state.current_page

# ==== PAGE: GENERATE QUESTIONS ====
if page == "Generate Questions":
    st.title("üß† Generate Survey Questions")

    if not os.path.exists(Q_FILE):
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `question.txt` ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏Å‡πà‡∏≠‡∏ô Deploy")
        st.stop()

    user_summary = st.text_area(
        "üóíÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°",
        height=300,
        value=st.session_state.get("user_summary_default", """
        ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:
        - ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå
        ‚Ä¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤

        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        ‚Ä¢ ‡∏£‡∏ß‡∏° 500 ‡∏Ñ‡∏ô
        ‚Ä¢ ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 125 ‡∏Ñ‡∏ô

        ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        ‚Ä¢ ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™
        ‚Ä¢ ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ ‡πÅ‡∏ï‡πà‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
        ‚Ä¢ ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
        ‚Ä¢ ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏¢‡∏ï‡∏¥ / ‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô

        ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
        ‚Ä¢ ‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥‡πÑ‡∏´‡∏°?
        ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Å‡πâ‡∏ß‡∏ß‡∏±‡∏î‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£+‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ+‡∏ñ‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏• ‡∏à‡∏∞‡∏¢‡∏≠‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?
        ‚Ä¢ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏á?
        ‚Ä¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£?
        ‚Ä¢ ‡∏ó‡∏≥‡πÑ‡∏°‡∏ñ‡∏∂‡∏á‡∏û‡∏Å‡πÅ‡∏Å‡πâ‡∏ß? ‡∏°‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏á?
        """)
    )
    st.session_state.user_summary_default = user_summary

    if st.button("üìÑ Generate / Update Questions"):
        prompt = f"""
‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:

{user_summary}

‡πÉ‡∏ä‡πâ Expectancy Theory + Maslow‚Äôs Hierarchy of Needs
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° 10 ‡∏Ç‡πâ‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
‡πÉ‡∏´‡πâ output ‡πÄ‡∏õ‡πá‡∏ô JSON array:
[
  {{
    "id": "Q-1",
    "question": "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°",
    "type": "Likert/Checkbox/Text/Choice/Prescreen",
    "options": ["opt1","opt2",...],
    "reason": "..."
  }},
  ...
]
"""
        with st.spinner("üîÅ Generating with Gemini..."):
            raw = ask_gemini(prompt)
            cleaned = extract_json_array(raw)
            try:
                qlist = json.loads(cleaned)
                # overwrite the existing question.txt
                with open(Q_FILE, "r+", encoding="utf-8") as f:
                    f.seek(0)
                    f.truncate()
                    json.dump(qlist, f, ensure_ascii=False, indent=2)
                st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `question.txt` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                st.experimental_rerun()
            except Exception:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ")
                st.code(raw, language="json")

# ==== PAGE: ANSWER POLL ====
elif page == "Answer Poll":
    st.title("üó≥Ô∏è Answer Survey Poll")

    if not os.path.exists(DB_FILE):
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `database.csv` ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏Å‡πà‡∏≠‡∏ô Deploy")
        st.stop()

    questions, load_error = load_questions()
    if load_error:
        st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î `question.txt` ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {load_error}")
        st.stop()
    if questions is None:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô `question.txt`")
        st.stop()

    # show existing responses
    df_db = pd.read_csv(DB_FILE)
    if not df_db.empty:
        st.download_button(
            "üì• Export Responses (.csv)",
            df_db.to_csv(index=False, encoding="utf-8-sig"),
            file_name="database.csv",
            mime="text/csv"
        )
        st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")
        for q in questions:
            qid, text, qtype = q["id"], q["question"], q["type"].lower()
            if qid in df_db.columns:
                if qtype == "checkbox":
                    exploded = df_db[qid].dropna().astype(str).str.split(";").explode()
                    counts = exploded.value_counts()
                else:
                    counts = df_db[qid].value_counts()
                st.markdown(f"**{qid}. {text}**")
                st.bar_chart(counts)

    st.subheader("‚úçÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°")
    with st.form("survey_form"):
        answers = {}
        for q in questions:
            qid, text, qtype = q["id"], q["question"], q["type"].lower()
            opts = q.get("options", [])
            label = f"{qid}. {text}"
            if qtype == "checkbox":
                answers[qid] = st.multiselect(label, opts, key=qid)
            elif qtype in ("likert", "choice", "prescreen"):
                answers[qid] = st.radio(label, opts, key=qid)
            else:
                answers[qid] = st.text_input(label, key=qid)
        submitted = st.form_submit_button("üöÄ Submit")

    if submitted:
        df_db = pd.read_csv(DB_FILE)
        row = {
            q["id"]: (";".join(answers[q["id"]]) if isinstance(answers[q["id"]], list) else answers[q["id"]])
            for q in questions
        }
        df_db = pd.concat([df_db, pd.DataFrame([row])], ignore_index=True)
        # overwrite the existing CSV without creating a new file
        with open(DB_FILE, "r+", encoding="utf-8") as f:
            f.seek(0)
            f.truncate()
            df_db.to_csv(f, index=False, encoding="utf-8-sig")
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.experimental_rerun()

# ==== PAGE: CHECK BIAS ====
elif page == "Check Bias":
    st.title("üßê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Bias ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°")
    st.markdown("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î `.txt` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏Ñ‡∏ï‡∏¥")
    uploaded = st.file_uploader("Upload .txt", type=["txt"])
    default = """1. ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ç‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
2. ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏≠‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?
3. ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
4. ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 15,000 ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"""
    questions_text = (
        uploaded.read().decode("utf-8") if uploaded else st.text_area("‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á", height=200, value=default)
    )
    if st.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Bias"):
        if "user_summary_default" not in st.session_state:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Generate Questions")
            st.stop()
        prompt = f"""‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÄ‡∏î‡∏¥‡∏°: {st.session_state.user_summary_default.strip()}

‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Bias ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà:
{questions_text.strip()}
"""
        with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
            result = ask_gemini(prompt)
        st.markdown("### ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        st.write(result)

# ==== PAGE: FIX SURVEY ====
elif page == "Fix Survey":
    st.title("üõ†Ô∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°")
    st.markdown("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î `.txt` ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
    uploaded = st.file_uploader("Upload .txt", type=["txt"], key="fix_upload")
    default = """1. ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ç‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
2. ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏≠‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?
3. ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
4. ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 15,000 ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"""
    questions_text = (
        uploaded.read().decode("utf-8") if uploaded else st.text_area("‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°", height=200, value=default, key="fix_text")
    )
    if st.button("üß† ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°"):
        if "user_summary_default" not in st.session_state:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Generate Questions")
            st.stop()
        prompt = f"""‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÄ‡∏î‡∏¥‡∏°: {st.session_state.user_summary_default.strip()}

‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
{questions_text.strip()}

‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô JSON array ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
[
  {{
    "id": "Q-1",
    "question": "...",
    "type": "...",
    "options": [...],
    "reason": "..."
  }},
  ...
]
"""
        with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á..."):
            result = ask_gemini(prompt)
        from re import findall
        try:
            json_text = max(findall(r"\[.*\]", result, flags=re.DOTALL), key=len)
            fixed = json.loads(json_text)
            with open("fig_json.json", "r+", encoding="utf-8") as f:
                f.seek(0)
                f.truncate()
                json.dump(fixed, f, ensure_ascii=False, indent=2)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å `fig_json.json` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            st.code(json.dumps(fixed, ensure_ascii=False, indent=2), language="json")
        except Exception as e:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÑ‡∏î‡πâ")
            st.code(result)
            st.exception(e)

# ==== PAGE: RE-CHECK ====
elif page == "Re-Check":
    st.title("üîç Re-Check ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°")
    if not os.path.exists(Q_FILE):
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö `question.txt` ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô")
        st.stop()
    try:
        question_data = json.load(open(Q_FILE, encoding="utf-8"))
    except Exception as e:
        st.error("‚ùå ‡∏≠‡πà‡∏≤‡∏ô `question.txt` ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        st.exception(e)
        st.stop()

    default_text = "\n".join([f"{q['id']}. {q['question']}" for q in question_data])
    edited = st.text_area("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", height=300, value=default_text)
    if st.button("üîé ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"):
        if "user_summary_default" not in st.session_state:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Generate Questions")
            st.stop()
        with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
            result = recheck_questionnaire_fit(edited, st.session_state.user_summary_default.strip())
        st.markdown("### ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        st.write(result)
